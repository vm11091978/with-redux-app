"use client"

import { useState, useEffect } from "react"
import Modal from "react-modal"
import Link from "next/link"
import { usePathname, useSearchParams } from "next/navigation"
import { useAppDispatch, useAppSelector } from "@/lib/hooks"
import {
  filterTextSearch,
  sortByName,
  sortByPrice,
  valueRadio,
  valueCheckbox,
  dataProducts,
} from "@/lib/features/productSlice"
import { COUNTRIES } from "./data.js"
import styles from "./Product.module.css"

export default function App() {
  const getParams = useSearchParams()
  const [modalNumOpen, setModalNumOpen] = useState(0)

  const modalContent = (
    <div className={styles.modalDialog} onClick={e => e.stopPropagation()}>
      <div className={styles.modalHeader} >
        <h2>–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–∞ —Ç–æ–≤–∞—Ä–∞ —Å id={modalNumOpen}</h2>
        <Link href={'/'} ><span className={styles.modalClose} >&times;</span></Link>
      </div>
      <ModalForm modalNumOpen={modalNumOpen} />
    </div>
  )

  // —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–∞–±–æ—Ç—É –∫–æ–¥–∞, —Å–¥–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø–µ—Ä–µ—Ö–æ–¥–æ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å get-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏ –≤—Å–ø–ª—ã—Ç–∏–µ–º –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  useEffect(() => {
    const timer = setTimeout(() => {
      // –∑–¥–µ—Å—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ—Å—Ç—Ä–æ–≥–∏–º
      if (getParams == "") {
        setModalNumOpen(0)
      } else {
        // –ø–µ—Ä–µ–±–µ—Ä—ë–º –≤—Å–µ get-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –µ—Å–ª–∏ –Ω–∞–π–¥—ë—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä, —Ö—Ä–∞–Ω—è—â–∏–π id —Ç–æ–≤–∞—Ä–∞, –∑–∞–ø–∏—à–µ–º —ç—Ç–æ—Ç id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        for (const param of getParams) {
          if (param[0] === "productid" && param[1] !== "") {
            setModalNumOpen(param[1])
            break;
          }
          // –µ—Å–ª–∏ get-–ø–∞—Ä–∞–º–µ—Ç—Ä —Å id —Ç–æ–≤–∞—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (—Ç.–µ. –Ω–µ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ), –ø—Ä–∏—Å–≤–æ–∏–º 0 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
          else {
            setModalNumOpen(0)
          }
        }
      }
    }, 1000);
  }, [getParams])

  return (
    <div>
      <SearchBar />
      <ProductTable />
      <Modal className={styles.modal} isOpen={modalNumOpen === 0 ? false : true} ariaHideApp={false} >
        {modalContent}
      </Modal>
    </div>
  )
}

function SearchBar() {
  const getParams = useSearchParams()
  const dispatch = useAppDispatch()
  // const filterText = useAppSelector((state) => state.product.filterText)
  const [filterText, setFilterText] = useState("")
  
  useEffect(() => {
    // –∑–¥–µ—Å—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ—Å—Ç—Ä–æ–≥–∏–º
    if (getParams == "") {
      setFilterText("")
      dispatch(filterTextSearch(""))
    } else {
      // –ø–µ—Ä–µ–±–µ—Ä—ë–º –≤—Å–µ get-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –µ—Å–ª–∏ –Ω–∞–π–¥—ë—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä, —Ö—Ä–∞–Ω—è—â–∏–π —Ç–µ–∫—Å—Ç –ø–æ–∏—Å–∫–∞, –∑–∞–ø–∏—à–µ–º —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      for (const param of getParams) {
        if (param[0] === "filter" && param[1] !== "") {
          setFilterText(param[1])
          dispatch(filterTextSearch(param[1]))
          break
        }
        // –µ—Å–ª–∏ get-–ø–∞—Ä–∞–º–µ—Ç—Ä —Å —Ç–µ–∫—Å—Ç–æ–º –ø–æ–∏—Å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (—Ç.–µ. –Ω–µ –Ω—É–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã), –∑–∞–ø–∏—à–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        else {
          setFilterText("")
          dispatch(filterTextSearch(""))
        }
      }
    }
  }, [getParams])
  
  return (
    <>
      {/* <form onSubmit={(e) => {e.preventDefault()}}> */}
        <input
          className={styles.search}
          type="text"
          value={filterText} placeholder="–§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–µ –≤ –∏–º–µ–Ω–∏ —Ç–æ–≤–∞—Ä–∞"
          /* onChange={(e) => dispatch(setFilterText2(e.target.value))} */
          onChange={(e) => setFilterText(e.target.value)}
        />
        {/* <button type="submit">Send</button> */}
      {/* </form> */}

      <Link href={filterText === '' ? '/' : `/?filter=${filterText}`} >
        <button className={styles.buttonRight} >–ò—Å–∫–∞—Ç—å</button>
      </Link>
    </>
  )
}

function ProductTable() {
  const dispatch = useAppDispatch()
  const { items, signName, signPrice } = useSortableData()

  return (
    <table className={styles.table}>
      <thead>
        <tr>
          <th className={styles.th} colSpan="2" onClick={() => dispatch(sortByName())} >
            Name <div className={styles.sort}>{signName}</div>
          </th>
          <th className={styles.th} onClick={() => dispatch(sortByPrice())} >
            Price <div className={styles.sort}>{signPrice}</div>
          </th>
          <th className={styles.th} >
            Actions
          </th>
        </tr>
      </thead>
      <TableBody sortedProducts={items} />
    </table>
  )
}

function useSortableData() {
  const DATAPRODUCTS = useAppSelector((state) => state.product.dataProducts)
  const isSortByPrice = useAppSelector((state) => state.product.isSortByPrice)
  const sortedOrder = useAppSelector((state) => state.product.sortedOrder)
  
  let sortedProducts = DATAPRODUCTS.slice()
  let signName = ""
  let signPrice = ""

  if (sortedOrder === "asc") {
    if (isSortByPrice) {
      sortedProducts = sortedProducts.sort((x, y) => x.price - y.price)
      signPrice = " üîº" 
    } else {
      sortedProducts = sortedProducts.sort((x, y) => x.name.localeCompare(y.name))
      signName = " üîº" 
    }
  }
  if (sortedOrder === "desc") {
    if (isSortByPrice) {
      sortedProducts = sortedProducts.sort((x, y) => y.price - x.price)
      signPrice = " üîΩ"
    } else {
      sortedProducts = sortedProducts.sort((x, y) => y.name.localeCompare(x.name))
      signName = " üîΩ"
    }
  }

  return { items: sortedProducts, signName, signPrice }
}

function TableBody({ sortedProducts }) {
  const filterText = useAppSelector((state) => state.product.filterText)
  const rows = []

  sortedProducts.forEach((product) => {
    if (product.name.toLowerCase().indexOf(filterText.toLowerCase()) === -1) {
      return
    }

    rows.push(
      <ProductRow
        product={product}
        key={product.id}
      />
    )
  })

  return <tbody>{rows}</tbody>
}

function ProductRow({ product }) {
  const getparam = "/?productid=" + product.id
  const price = product.price.toLocaleString()

  return (
    <tr>
      <td className={styles.td} >
        <Link className={styles.link} href={getparam} >{product.name}</Link>
      </td>
      <td className={styles.td} >
        <span>{product.count}</span>
      </td>
      <td className={styles.td} >
        ${price}
      </td>
      <td className={styles.td} >
        <Link href={getparam} >
          <button className={styles.button} >Edit</button>
        </Link>
        <button className={styles.buttonRight} >Delete</button>
      </td>
    </tr>
  )
}

function ModalForm({ modalNumOpen }) {
  if (modalNumOpen === 0) {
    console.log("modalNumOpen = 0")
    return
  }
  console.log("modalNumOpen " + modalNumOpen)

  const DATAPRODUCTS = useAppSelector((state) => state.product.dataProducts)
  const dispatch = useAppDispatch()
  console.log(DATAPRODUCTS)

  const [nameText, setNameText] = useState("")
  const [emailText, setEmailText] = useState("")
  const [countText, setCountText] = useState(0)
  const [priceText, setPriceText] = useState(0)
  const [priceTextFocus, setPriceTextFocus] = useState(0)
  const [location, setLocation] = useState("")
  const [radioValue, setRadioValue] = useState(0)
  const [checkboxValues, setCheckboxValues] = useState()

  let radio = ""
  if (!radioValue) {
    radio = <span>&nbsp;&bull; –ù–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞</span>
  }
  if (!radioValue && location === "–ì–æ—Ä–æ–¥") {
    radio = <span>&nbsp;&bull; –í—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–∞–Ω—É</span>
  }
  if (location === "–°—Ç—Ä–∞–Ω–∞") {
    radio = <Radio
      radioValue={radioValue}
      setRadioValue={setRadioValue}
      setCheckboxValues={setCheckboxValues}
    />
  }

  let checkbox = ""
  if (radioValue && location === "–ì–æ—Ä–æ–¥") {
    checkbox = <Checkbox
      radioValue={radioValue}
      checkboxValues={checkboxValues}
      setCheckboxValues={setCheckboxValues}
    />
  }

  // —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–∞–±–æ—Ç—É –∫–æ–¥–∞, —Å–¥–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ—Ç–∫—Ä—ã—Ç–∏–µ–º —Ñ–æ—Ä–º—ã –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º –µ—ë –ø–æ–ª–µ–π —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  useEffect(() => {
    const timer = setTimeout(() => {
      // –ø–µ—Ä–µ–±–µ—Ä—ë–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã: –∫–æ–≥–¥–∞ –Ω–∞–π–¥—ë–º —Ç–æ–≤–∞—Ä —Å –Ω—É–∂–Ω—ã–º id, –∑–∞–ø–∏—à–µ–º –∞—Ç—Ç—Ä–∏–±—É—Ç—ã —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
      for (const product of DATAPRODUCTS) {
        if (product.id == modalNumOpen) {
          setNameText(product.name)
          setEmailText(product.email)
          setCountText(product.count)
          setPriceText(product.price)
          setPriceTextFocus('$' + product.price.toLocaleString())
          setRadioValue(product.delivery)
          setCheckboxValues(product.deliveryCity)
          break
        }
      }
    }, 1000);
  }, [modalNumOpen])

  return (
    <form className={styles.form} onSubmit={(e) => {e.preventDefault()}}>
      <label htmlFor="name">
        Name:
      </label>
      <div>
        <input
          id="name"
          className={styles.input}
          type="text"
          value={nameText} placeholder="–∏–º—è"
          onChange={(e) => setNameText(e.target.value)}
        /> &bull; Required field
      </div>

      <label htmlFor="email">
        Supplier email:
      </label>
      <div>
        <input
          id="email"
          className={styles.input}
          type="email"
          value={emailText} placeholder="email"
          onChange={(e) => setEmailText(e.target.value)}
        /> &bull; Incorrect email
      </div>

      <label htmlFor="count">
        Count:
      </label>
      <div>
        <input
          id="count"
          className={styles.inputCount}
          type="number"
          value={countText} placeholder="count"
          onChange={(e) => setCountText(e.target.value)}
        />
      </div>

      <label htmlFor="price">
        Price:
      </label>
      <div>
        <input
          id="price"
          className={styles.input}
          type="text"
          value={priceTextFocus}
          onFocus={_ => setPriceTextFocus(priceText)}
          onBlur={_ => setPriceTextFocus('$' + Number(priceText).toLocaleString())}
          placeholder="price"
          onChange={(e) => {setPriceText(e.target.value); setPriceTextFocus(e.target.value);}}
        />
      </div>

      <label htmlFor="delivery">
        Delivery:
      </label>
      <div className={styles.delivery}>
        <select
          id="delivery"
          className={styles.select}
          value={location}
          onChange={(e) => {
            setLocation(e.target.value);
            if (!e.target.value) {
              setRadioValue(0)
              setCheckboxValues(undefined)
            }
          }}
        >
          <option key={"–Ω–µ—Ç"} value={""}>
          </option>
          <option key={"–°—Ç—Ä–∞–Ω–∞"} value={"–°—Ç—Ä–∞–Ω–∞"}>
            –°—Ç—Ä–∞–Ω–∞
          </option>
          <option key={"–ì–æ—Ä–æ–¥"} value={"–ì–æ—Ä–æ–¥"}>
            –ì–æ—Ä–æ–¥
          </option>
        </select>

        { radio }
        { checkbox }
      </div>

      <button
        className={styles.button}
        type="submit"
        onClick={() => dispatch(dataProducts({
          'id': Number(modalNumOpen),
          'name': String(nameText),
          'email': String(emailText),
          'price': Number(priceText),
          'count': Number(countText),
          'delivery': Number(radioValue),
          'deliveryCity': checkboxValues,
        }))}
      >
        Add / Update
      </button>
    </form>
  )
}

function Radio({ radioValue, setRadioValue, setCheckboxValues }) {
  const rows = []
  let i = 1
  COUNTRIES.forEach((country) => {
    rows.push(
      <div key={i}>
        <input
          type="radio"
          name="radio"
          value={i}
          checked={radioValue == `${i}` ? true : false}
          onChange={(e) => {setRadioValue(e.target.value); setCheckboxValues(undefined);}}
        />
        {Object.keys(country)}
      </div>
    )
    i++
  })

  return <div>{rows}</div>
}

function Checkbox({ radioValue, checkboxValues, setCheckboxValues }) {
  if (radioValue) {
    let checkboxValues2 = checkboxValues
    let checkAll = true
    // –ø–æ–ª—É—á–∏–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã (–µ—ë –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –≤ radioValue)
    const cities = Object.values(COUNTRIES[radioValue-1])[0]
    console.log("cities: " + cities)

    // –µ—Å–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –Ω–∏–∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö
    if (checkboxValues === undefined) {
      checkboxValues2 = new Array(cities.length).fill(false)
      checkAll = false
    } else {
    // –∏–Ω–∞—á–µ —É–∑–Ω–∞–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –º–∞—Å—Å–∏–≤–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω false - –µ—Å–ª–∏ –¥–∞, —Ç–æ —á–µ–∫–±–æ–∫—Å "Select All" –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–µ–∑ –≥–∞–ª–æ—á–∫–∏
      for (const check of checkboxValues2) {
        if (check === false) {
          checkAll = false
          break
        }
      }
    }

    const rows = [
      <div key="all">
        <input
          type="checkbox"
          value="all"
          checked={checkAll}
          onChange={(e) => setCheckboxValues(chengeCheckbox(e.target.value, checkboxValues2))}
        />
        Select All
      </div>
    ]

    let i = 0
    cities.forEach((city) => {
      rows.push(
        <div key={i+1}>
        <input
          type="checkbox"
          value={i+1}
          checked={checkboxValues2[`${i}`]}
          onChange={(e) => setCheckboxValues(chengeCheckbox(e.target.value, checkboxValues2))}
        />
        {city}
        </div>
      )
      i++
    })

    return <div>{rows}</div>
  }
}

function chengeCheckbox(inputNumber, values) {
  if (inputNumber == "all") {
    // –µ—Å–ª–∏ –µ—Å—Ç—å –≤ –º–∞—Å—Å–∏–≤–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω false - –≤—Å–µ–º —á–µ–∫–±–æ–∫—Å–∞–º –∏ —á–µ–∫–±–æ–∫—Å—É "Select All" –ø–æ—Å—Ç–∞–≤–∏–º –≥–∞–ª–æ—á–∫–∏
    for (const check of values) {
      if (check === false) {
        return new Array(values.length).fill(true)
      }
    }
    // –∏–Ω–∞—á–µ (–µ—Å–ª–∏ –º–∞—Å—Å–∏–≤ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ true) - –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—ã–±–æ—Ä: —Å–Ω–∏–º–µ–º –≥–∞–ª–æ—á–∫–∏ —Å–æ –≤—Å–µ—Ö —á–µ–∫–±–æ–∫—Å–æ–≤
    return new Array(values.length).fill(false)
  }

  let arr = []
  for (let i = 0; i < values.length; i++) {
    if (i == inputNumber-1) {
      arr.push(!values[i]);
    } else {
      arr.push(values[i]);
    }
  }

  return arr
}

/*
export default function App() {
  return <FilterableProductTable products={PRODUCTS} />;
}
*/
